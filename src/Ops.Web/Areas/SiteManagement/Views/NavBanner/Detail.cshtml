@model Ocuda.Ops.Controllers.Areas.SiteManagement.ViewModels.NavBannerViewModels.DetailViewModel

<div class="row mb-2 g-3">
    <div class="col-sm-8">
        <h1>
            Nav Banner
            <small class="text-muted">@Model.Name</small>
        </h1>
    </div>
    <div class="col-sm-4">
        @if (Model.PageLayoutId.HasValue)
        {
            <a asp-controller="@PagesController.Name"
               asp-action="@nameof(PagesController.LayoutDetail)"
               asp-route-id="@Model.PageLayoutId.Value"
               class="btn btn-outline-dark mt-2 mb-1 ms-2 float-end">Back</a>
        }
        else
        {
            @* <a asp-action="@nameof(NavBannerController.Index)"
        class="btn btn-outline-dark mt-2 mb-1 ms-2 float-end">Cancel</a> *@
        }
    </div>


    <form class="d-flex flex-column gap-2" enctype="multipart/form-data" asp-action="@nameof(NavBannerController.Detail)" method="post" role="form">

        <input type="hidden" asp-for="PageLayoutId" />
        <input type="hidden" asp-for="NavBannerId" />
        <input type="hidden" asp-for="Language.Id" />

        @if (Model.LanguageList?.Count() > 1)
        {
            <div class="mb-3 row">
                <div class="col-md-9">
                    <label asp-for="Language" class="col-form-label me-3"></label>
                    @foreach (var item in Model.LanguageList.Where(_ => !_.Disabled))
                    {
                        <a href="@Url.Action(nameof(NavBannerController.Detail), new { id = Model.NavBannerId, language = item.Value })"
                           class="btn btn-sm btn-outline-info mt-1 @(item.Selected ? "active" : null)">@item.Text</a>
                    }
                </div>
            </div>
            <div class="row d-none oc-save-warning">
                <div class="offset-md-3 col-md-9">
                    <div class="alert alert-warning">
                        <span class="fa-solid fa-circle-arrow-up"></span> Unsaved changes will be lost if you change languages.
                    </div>
                </div>
            </div>
        }
        <div id="bannerPreview" class="card @(Model.NavBannerImage?.ImagePath == null ? "d-none" : "")">
            <div class="card-header">Preview</div>
            <div class="card-body">
                <div class="row">
                    <div class="col-12">
                        <div class="row">
                            <div class="col-12">
                                <div class="mb-4">
                                    <div class="row g-0">
                                        <div class="col-12 col-md-7">
                                            <img id="imagePreview"
                                                 class="img-fluid"
                                                 src="@(Model.NavBannerImage == null
                                                    ? ""
                                                    : Url.Action(
                                                        nameof(NavBannerController.BannerImage),
                                                        new { navBannerId = Model.NavBannerId,
                                                            languageName = Model.Language.Name}))" />
                                        </div>
                                        <div class="col-12 col-md-5 p-2 gap-2 fs-5 text-bold" style="background:lightgray; box-sizing: border-box">
                                            <div class="banner-link-grid-container gap-2 h-100">
                                                @foreach (var link in Model.Links)
                                                {
                                                    <a class="banner-link-href h-100" href="@link.Link">
                                                        <div class="d-flex align-items-center justify-content-center py-4 py-md-1 gap-2 h-100" style="background:white">
                                                            <span class="@link.Icon mb-1 banner-link-icon"></span>
                                                            <span class="text-bold banner-link-text">@link.Text.Text</span>
                                                        </div>
                                                    </a>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <label asp-for="@Model.Image"></label>
        <input type="file" asp-for="@Model.Image" />

        <label asp-for="@Model.NavBannerImage.ImageAltText"></label>
        <input type="text" asp-for="@Model.NavBannerImage.ImageAltText" />

        @for (int i = 0; i < 4; i++)
        {
            <div class="row mb-2">
                <div class="col-12">
                    <div class="accordion" id="accordionTemplate@(i)">
                        <div class="accordion-item">
                            <div class="accordion-header">
                                <button class="accordion-button @(string.IsNullOrEmpty(Model.Links[i].Text.Text) ? "" : "collapsed")"
                                        type="button"
                                        data-bs-toggle="collapse"
                                        data-bs-target="#accordionTemplateContent@(i)"
                                        aria-expanded="false"
                                        aria-controls="accordionTemplateContent@(i)">
                                    Link @(i + 1)
                                </button>
                            </div>
                            <div id="accordionTemplateContent@(i)" class="accordion-collapse collapse @(string.IsNullOrEmpty(Model.Links[i].Text.Text) ? " show" : "")" data-parent="#accordionTemplate@(i)">
                                <div class="accordion-body">
                                    <div class="row">
                                        <div class="col-12">
                                            <input class="banner-link-icon-input" asp-for="@Model.Links[i].Icon" type="text" formgroup />
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-12">
                                            <input class="banner-link-text-input" asp-for="@Model.Links[i].Text.Text" type="text" formgroup />
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-12">
                                            <input class="banner-link-href-input" asp-for="@Model.Links[i].Link" type="text" formgroup />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        <button class="btn btn-success" style="max-width: 140px;" type="submit">Submit</button>
    </form>
</div>

@section scripts
    {
    <script src="~/js/md.min.js" asp-append-version="true"></script>

    <script>
        const bannerPreview = document.querySelector('#bannerPreview');

        const bannerImage = document.querySelector('#imagePreview');
        const bannerImageInput = document.querySelector('#Image');

        const bannerLinkIcons = document.querySelectorAll('.banner-link-icon');
        const bannerLinkIconInputs = document.querySelectorAll('.banner-link-icon-input');

        const bannerLinkTexts = document.querySelectorAll('.banner-link-text');
        const bannerLinkTextInputs = document.querySelectorAll('.banner-link-text-input');

        const bannerLinkHrefs = document.querySelectorAll('.banner-link-href');
        const bannerLinkHrefInputs = document.querySelectorAll('.banner-link-href-input');

        bannerImageInput.addEventListener('change', updateBannerImage);

        bannerLinkIconInputs.forEach(input => input.addEventListener('change', updateLinkIcons));
        bannerLinkTextInputs.forEach(input => input.addEventListener('change', updateLinkTexts));
        bannerLinkHrefInputs.forEach(input => input.addEventListener('change', updateLinkHrefs));

        function updateBannerImage() {
            bannerPreview.classList.remove('d-none');

            const reader = new FileReader();

            reader.onload = function (e) {
                bannerImage.src = e.target.result;
            };

            reader.readAsDataURL(bannerImageInput.files[0]);
        }

        function updateLinkIcons() {
            for (let i = 0; i < 4; ++i) {
                bannerLinkIcons[i].className = `${bannerLinkIconInputs[i].value} mb-1 banner-link-icon`;
            }
        }

        function updateLinkTexts() {
            for (let i = 0; i < 4; ++i) {
                bannerLinkTexts[i].innerText = bannerLinkTextInputs[i].value;
            }
        }

        function updateLinkHrefs() {
            for (let i = 0; i < 4; ++i) {
                bannerLinkHrefs[i].href = bannerLinkHrefInputs[i].value;
            }
        }

    </script>
}