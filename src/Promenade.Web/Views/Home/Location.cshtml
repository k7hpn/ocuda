@model Ocuda.Promenade.Controllers.ViewModels.Home.LocationDetailViewModel

@section metadata {
    <link rel="canonical" href="@Model.CanonicalLink" />
}

<div class="prom-location">
    <div class="row">
        <div class="col-12 col-md-5 order-md-2">
            <img src="@Model.Location.ImagePath"
                 class="img-fluid pb-2" />
        </div>
        <div class="col-12 col-md-7 order-md-1">
            <h1>@Model.Location.Name</h1>
            <a aria-label="@Localizer[Promenade.NewWindowItem, @Localizer[Promenade.LocationSeeAMap]]"
               href="@Model.Location.MapLink"
               class="btn btn-outline-secondary float-end ms-2 prom-locations-maplink d-print-none"
               target="_blank">
                <span class="fa-solid fa-map-location-dot"></span> Map
            </a>
            @if (Model.Location.CurrentStatus != null)
            {
                <div class="todays-status">
                    @if (Model.Location.CurrentStatus?.IsCurrentlyOpen == true
                   && !string.IsNullOrEmpty(Model.Location.CurrentStatus.TodaysHours))
                    {
                        @Localizer[Promenade.TodaysHours, @Model.Location.CurrentStatus.TodaysHours]
                    }
                    else
                    {
                        @Model.Location.CurrentStatus.StatusMessage
                    }
                </div>
            }
            <div class="visually-hidden">@Localizer[Promenade.LocationOurAddress]</div>
            <address>
                @Model.Location.Address
                <br />
                @Model.Location.City,
                @Model.Location.State
                @Model.Location.Zip
                <br />
                <a aria-label="@Localizer[Promenade.LocationCallUsAt, Model.Location.Phone]"
                   href="tel:@Model.Location.Phone">@Model.Location.Phone</a>
            </address>
            <div class="visually-hidden">@Localizer[Promenade.LocationCurrentHours]</div>
            @if (Model.Location.IsAlwaysOpen)
            {
                <p>@Localizer[Promenade.LocationOpen]</p>
            }
            else
            {
                <p>
                    @if (!string.IsNullOrEmpty(Model.HoursSegmentText))
                    {
                        @Html.Raw(Model.HoursSegmentText)
                    }
                    else
                    {
                        @if (Model.Location.IsClosed)
                        {
                            <strong style="font-size: 1.2rem;"
                                    class="text-danger prom-locaton-isclosed">@Localizer[Promenade.LocationClosed]</strong>
                        }
                        else
                        {
                            @foreach (var dayGrouping in Model.Location.LocationHours)
                            {
                                <div>
                                    <strong>@dayGrouping.Days</strong>
                                    <span>@dayGrouping.Time</span>
                                </div>
                            }
                        }
                    }
                </p>
            }
            @if (!string.IsNullOrEmpty(Model.ShowMessage))
            {
                <div class="alert alert-info prom-alert"><p>@Html.Raw(Model.ShowMessage)</p></div>
            }
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Model.PreFeatureSegmentText))
    {
        <div class="row prom-feature-segment">
            <div class="col-12">
                @if (!string.IsNullOrEmpty(Model.PreFeatureSegmentHeader))
                {
                    <h2>@Model.PreFeatureSegmentHeader</h2>
                }
                @Html.Raw(Model.PreFeatureSegmentText)
            </div>
        </div>
    }

    <h2>@Localizer[Promenade.LocationInformationHeader]</h2>

    @if (Model.Location.DescriptionSegment?.Text?.Length > 0)
    {
        <div class="row prom-feature-segment">
            <div class="col-12">
                @Html.Raw(Model.Location.DescriptionSegment.Text)
            </div>
        </div>
    }

    @if (Model.ScheduledEvents?.Count() > 0)
    {
        <h2>Upcoming Events</h2>
        <div class="row">
            @foreach (var scheduledEvent in Model.ScheduledEvents)
            {
                <div class="col-12 col-md-4 d-flex mb-4">
                    <div class="card flex-fill w-100">
                        <div class="card-header">
                            <div class="card-title h5 pt-1">
                                <a asp-action="@nameof(HomeController.EventDetails)"
                                   asp-controller="@HomeController.Name"
                                   asp-route-slug="@scheduledEvent.Slug"
                                   asp-route-locationSlug="@Model.Location.Stub">
                                    @scheduledEvent.Title
                                </a>
                            </div>
                        </div>
                        <div class="card-body">
                            @scheduledEvent.Description
                        </div>
                        @if (scheduledEvent.MaxPeople > 0)
                        {
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item">
                                    Registered event:
                                    @scheduledEvent.Registrations
                                    of
                                    @scheduledEvent.MaxPeople
                                    slots taken
                                </li>
                            </ul>
                        }
                        <div class="card-footer d-flex">
                            <div class="flex-grow-1">@scheduledEvent.StartDate.ToString("g")</div>
                            <div>@scheduledEvent.DurationText</div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    <h2>Library Features</h2>
    <div class="row prom-features">
        @foreach (var feature in Model.LocationFeatures)
        {
            <div class="col-4 col-md-3 col-lg-2 my-2">
                @if (string.IsNullOrEmpty(feature.RedirectLink))
                {
                    <a asp-action="@nameof(HomeController.Feature)"
                       asp-controller="@HomeController.Name"
                       asp-route-locationSlug="@Model.Location.Stub"
                       asp-route-featureSlug="@feature.Stub"
                       data-bs-toggle="modal"
                       data-bs-target="#featureModal"
                       target="@(feature.NewTab == true ? "_blank" : null)"
                       data-featureUrl="@Url.Action(nameof(HomeController.FeatureDetails), HomeController.Name, new { locationSlug = Model.Location.Stub, featureSlug = feature.Stub })"
                       data-name="@feature.Name">
                        <span class="fa-stack fa-2x d-block mx-auto">
                            <span class="fa-solid fa-square fa-stack-2x"></span>
                            <span class="@feature.Icon"
                            @(string.IsNullOrEmpty(feature.IconText) ? "" : "aria-hidden='true'")>
                                @Html.Raw(feature.IconText)
                            </span>
                        </span>
                        @feature.Name
                        @if (feature.NewTab == true)
                        {
                            <span class="visually-hidden">@Localizer[Promenade.NewWindow]</span>
                        }
                    </a>
                }
                else
                {
                    <a href="@feature.RedirectLink" target="@(feature.NewTab == true ? "_blank" : null)">
                        <span class="fa-stack fa-2x d-block mx-auto">
                            <span class="fa-solid fa-square fa-stack-2x"></span>
                            <span class="@feature.Icon"></span>
                        </span>
                        @feature.Name
                        @if (feature.NewTab.HasValue && feature.NewTab.Value == true)
                        {
                            <span class="visually-hidden">@Localizer[Promenade.NewWindow]</span>
                        }
                    </a>
                }
            </div>
        }
    </div>

    @if (!string.IsNullOrEmpty(Model.PostFeatureSegmentText))
    {
        <div class="row prom-feature-segment">
            <div class="col-12">
                @if (!string.IsNullOrEmpty(Model.PostFeatureSegmentHeader))
                {
                    <h2>@Model.PostFeatureSegmentHeader</h2>
                }
                @Html.Raw(Model.PostFeatureSegmentText)
            </div>
        </div>
    }

    @if (Model.NearbyCount > 1)
    {
        <div class="prom-location-nearby">
            <h2>@Localizer[Promenade.LocationNearbyLocationsHeader]</h2>

            <p>
                @Localizer[Promenade.LocationInterestedInNearby]
                <a aria-label="@Localizer[Promenade.NewWindowItem, @Localizer[Promenade.LocationSubscribeNearby]]"
                   href="@Model.LocationNeighborGroup.SubscriptionUrl"
                   target="_blank">@Localizer[Promenade.LocationSubscribeNearby]</a>
            </p>

            <div class="row">
                <div class="col-md-6 col-lg-5">
                    <a href="@Model.LocationNeighborGroup.MapImage"
                       class="map-popup"
                       data-bs-toggle="modal"
                       data-bs-target="#mapModal"
                       target="_blank">
                        <img src="@Model.LocationNeighborGroup.MapImage"
                             class="d-block img-fluid mx-auto"
                             alt="@Model.LocationNeighborGroup.Description">
                    </a>
                </div>
                <div class="col-md-6 col-lg-7">
                    <table class="table table-sm">
                        @foreach (var locationGroup in Model.NearbyLocationGroups)
                        {
                            <tr>
                                <td>@locationGroup.DisplayOrder.</td>
                                <td colspan="@(locationGroup.Location.HasEvents ? 1 : 2)">
                                    <a asp-action="@nameof(HomeController.Location)"
                                       asp-controller="@HomeController.Name"
                                       asp-route-locationStub="@locationGroup.Location.Stub">@locationGroup.Location.Name</a>
                                </td>
                                @if (locationGroup.Location.HasEvents)
                                {
                                    <td>
                                        @if (!string.IsNullOrWhiteSpace(locationGroup.Location.EventLink))
                                        {
                                            <a aria-label="@Localizer[Promenade.LocationSubscribeToName, locationGroup.Location.Name]"
                                               href="@locationGroup.Location.SubscriptionLink"
                                               class="btn btn-sm btn-outline-secondary text-dark m-1 float-end">
                                                <span class="fa-regular fa-envelope"></span>
                                                @Localizer[Promenade.ButtonSubscribe]
                                            </a>
                                        }
                                        @if (!string.IsNullOrWhiteSpace(locationGroup.Location.SubscriptionLink))
                                        {
                                            <a aria-label="@Localizer[Promenade.LocationViewEventsName, locationGroup.Location.Name]"
                                               href="@locationGroup.Location.EventLink"
                                               class="btn btn-sm btn-outline-secondary text-dark m-1 float-end">
                                                <span class="fa-regular fa-calendar-days"></span>
                                                @Localizer[Promenade.LocationButtonEvents]
                                            </a>
                                        }
                                    </td>
                                }
                            </tr>
                        }
                        <tr>
                            <td colspan="3">
                                <a href="@Model.LocationNeighborGroup.SubscriptionUrl"
                                   class="btn btn-sm btn-outline-secondary text-dark m-1 float-end"
                                   target="_blank">
                                    <span class="fa-regular fa-envelope"></span>
                                    @if (Model.NearbyCount == Model.NearbyEventsCount)
                                    {
                                        @Localizer[Promenade.LocationUpdatesFromAllCount, Model.NearbyEventsCount]
                                        ;
                                    }
                                    else
                                    {
                                        @Localizer[Promenade.LocationUpdatesFromCount, Model.NearbyEventsCount]
                                        ;
                                    }
                                    <span class="visually-hidden">@Localizer[Promenade.NewWindow]</span>
                                </a>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

<div modal id="featureModal"></div>

@section Scripts {
    <script>
        $("#featureModal").on("show.bs.modal", function (event) {
            var button = $(event.relatedTarget);
            var featureUrl = button.data("featureurl");
            var name = button.data("name");

            var modal = $(this);
            modal.find(".modal-title").html(name);

            var modalBody = modal.find(".modal-body");
            modalBody.html("<span class=\"fa-solid fa-spinner fa-2x fa-pulse\"></span>")

            $.getJSON(featureUrl,
                function (response) {
                    modalBody.html(response.bodyText).append(response.text);
                })
                .fail(function () {
                    window.location.href = button.attr("href");
                });
        });
    </script>

    @if (Model.Schema != null)
    {
        <script type="application/ld+json">
            @Html.Raw(Model.Schema.ToHtmlEscapedString())
        </script>
    }
}
