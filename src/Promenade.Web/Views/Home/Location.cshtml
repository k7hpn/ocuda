@model Ocuda.Promenade.Controllers.ViewModels.Home.LocationDetailViewModel

@section metadata {
    <link rel="canonical" href="@Model.CanonicalLink" />
}

@if (!string.IsNullOrEmpty(Model.PreFeatureSegmentText))
{
    <div class="row prom-feature-segment">
        <div class="col-12">
            @if (!string.IsNullOrEmpty(Model.PreFeatureSegmentHeader))
            {
                <h2>@Model.PreFeatureSegmentHeader</h2>
            }
            @Html.Raw(Model.PreFeatureSegmentText)
        </div>
    </div>
}

<div class="prom-location">
    <div class="row">
        <div class="col-12">
            <div class="d-flex flex-column flex-md-row col-lg-10 offset-lg-1 mx-auto d-block gap-1 px-0 pb-1 pt-sm-1 mb-4 bg-dark-subtle">
                <div class="col-12 col-md-4 bg-white">
                    <img src="@Model.Location.ImagePath"
                         class="img-cover" />
                </div>
                <div class="col-12 col-md-8 d-flex flex-column flex-sm-row gap-1">
                    <div class="col-12 col-sm-6 bg-white px-0 py-4 px-sm-4">
                        <h2>@Model.Location.Name</h2>
                        @if (Model.Location.CurrentStatus != null)
                        {
                            <div class="todays-status">
                                @if (Model.Location.CurrentStatus?.IsCurrentlyOpen == true
                               && !string.IsNullOrEmpty(Model.Location.CurrentStatus.TodaysHours))
                                {
                                    @Localizer[Promenade.TodaysHours, @Model.Location.CurrentStatus.TodaysHours]
                                }
                                else
                                {
                                    @Model.Location.CurrentStatus.StatusMessage
                                }
                            </div>
                        }
                        <div class="visually-hidden">@Localizer[Promenade.LocationOurAddress]</div>
                        <address>
                            @Model.Location.Address
                            <br />
                            @Model.Location.City,
                            @Model.Location.State
                            @Model.Location.Zip
                            <br />
                            <a aria-label="@Localizer[Promenade.LocationCallUsAt, Model.Location.Phone]"
                               href="tel:@Model.Location.Phone">@Model.Location.Phone</a>
                        </address>
                        <div class="visually-hidden">@Localizer[Promenade.LocationCurrentHours]</div>
                        @if (Model.Location.IsAlwaysOpen)
                        {
                            <p>@Localizer[Promenade.LocationOpen]</p>
                        }
                        else
                        {
                            @if (!string.IsNullOrEmpty(Model.HoursSegmentText))
                            {
                                @Html.Raw(Model.HoursSegmentText)
                            }
                            else
                            {
                                @if (Model.Location.IsClosed)
                                {
                                    <strong style="font-size: 1.2rem;"
                                            class="text-danger prom-locaton-isclosed">@Localizer[Promenade.LocationClosed]</strong>
                                }
                                else
                                {
                                    @foreach (var dayGrouping in Model.Location.LocationHours)
                                    {
                                        <div class="prom-location-hours">
                                            <strong>@dayGrouping.Days</strong>
                                            <span>@dayGrouping.Time</span>
                                        </div>
                                    }
                                }
                            }
                        }
                        @if (!string.IsNullOrEmpty(Model.ShowMessage))
                        {
                            <div class="alert alert-info prom-alert"><p>@Html.Raw(Model.ShowMessage)</p></div>
                        }
                    </div>
                    <div class="col-12 col-sm-6 bg-white px-0 py-4 px-sm-4 location-feature-link">
                        <h2>@Localizer[Promenade.AtThisLocation]</h2>
                        @foreach (var feature in Model.AtThisLocation)
                        {
                            @if (string.IsNullOrEmpty(feature.RedirectLink))
                            {
                                if (string.IsNullOrEmpty(feature.Text))
                                {
                                    @if (feature.Icon.StartsWith("fa"))
                                    {
                                        <div class="d-flex gap-2 align-items-center mb-1">
                                            <span class="@feature.Icon"></span>
                                            <span> @feature.Name</span>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="d-flex gap-2 align-items-center mb-1">
                                            <span>@feature.Icon</span>
                                            <span>@feature.Name</span>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <a asp-action="@nameof(HomeController.Feature)"
                                       asp-controller="@HomeController.Name"
                                       asp-route-locationSlug="@Model.Location.Stub"
                                       asp-route-featureSlug="@feature.Stub"
                                       data-bs-toggle="modal"
                                       data-bs-target="#featureModal"
                                       target="@(feature.NewTab == true ? "_blank" : null)"
                                       data-featureUrl="@Url.Action(nameof(HomeController.FeatureDetails), HomeController.Name, new { locationSlug = Model.Location.Stub, featureSlug = feature.Stub })"
                                       data-name="@feature.Name">
                                        @if (feature.Icon.StartsWith("fa"))
                                        {
                                            <div class="d-flex gap-2 align-items-center mb-1">
                                                <span class="@feature.Icon"></span>
                                                <span> @feature.Name</span>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="d-flex gap-2 align-items-center mb-1">
                                                <span>@feature.Icon</span>
                                                <span>@feature.Name</span>
                                            </div>
                                        }
                                        @if (feature.NewTab == true)
                                        {
                                            <span class="visually-hidden">@Localizer[Promenade.NewWindow]</span>
                                        }
                                    </a>
                                }
                            }
                            else
                            {
                                <a href="@feature.RedirectLink" target="@(feature.NewTab == true ? "_blank" : null)">
                                    @if (feature.Icon.StartsWith("fa"))
                                    {
                                        <div class="d-flex gap-2 align-items-center mb-1">
                                            <span class="@feature.Icon"></span>
                                            <span> @feature.Name</span>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="d-flex gap-2 align-items-center mb-1">
                                            <span>@feature.Icon</span>
                                            <span>@feature.Name</span>
                                        </div>
                                    }
                                    @if (feature.NewTab.HasValue && feature.NewTab.Value == true)
                                    {
                                        <span class="visually-hidden">@Localizer[Promenade.NewWindow]</span>
                                    }
                                </a>
                            }

                        }
                        <a aria-label="@Localizer[Promenade.NewWindowItem, @Localizer[Promenade.LocationSeeAMap]]"
                           href="@Model.Location.MapLink"
                           class="btn btn-outline-secondary float-end ms-2 mt-3 prom-locations-maplink d-print-none"
                           target="_blank">
                            <span class="fa-solid fa-map-location-dot"></span> Map
                        </a>
                    </div>
                </div>

            </div>
        </div>
    </div>
    <div class="row g-0 mx-auto mb-4 text-start">
        <div class="row p-0 mt-0 gx-0 gy-3 gx-sm-3 col-lg-10 offset-lg-1">
            <h2 class="mt-0 px-lg-0">@Localizer[Promenade.ServicesAvailable]</h2>
            @foreach (var feature in Model.ServicesAvailable)
            {
                <div class="col-12 col-sm-4 location-feature-link">
                    @if (string.IsNullOrEmpty(feature.RedirectLink))
                    {
                        if (string.IsNullOrEmpty(feature.Text))
                        {
                            <div class="d-flex gap-2 align-items-center ps-2 py-3 location-feature-button">
                                @if (feature.Icon.StartsWith("fa"))
                                {
                                    <span class="@feature.Icon"></span>
                                    <span>@feature.Name</span>
                                }
                                else
                                {
                                    <span>@feature.Icon</span>
                                    <span>@feature.Name</span>
                                }
                            </div>
                        }
                        else
                        {
                            <a asp-action="@nameof(HomeController.Feature)"
                               asp-controller="@HomeController.Name"
                               asp-route-locationSlug="@Model.Location.Stub"
                               asp-route-featureSlug="@feature.Stub"
                               data-bs-toggle="modal"
                               data-bs-target="#featureModal"
                               target="@(feature.NewTab == true ? "_blank" : null)"
                               data-featureUrl="@Url.Action(nameof(HomeController.FeatureDetails), HomeController.Name, new { locationSlug = Model.Location.Stub, featureSlug = feature.Stub })"
                               data-name="@feature.Name">
                                <div class="d-flex gap-2 align-items-center ps-2 py-3 location-feature-button">
                                    @if (feature.Icon.StartsWith("fa"))
                                    {
                                        <span class="@feature.Icon"></span>
                                        <span>@feature.Name</span>
                                    }
                                    else
                                    {
                                        <span>@feature.Icon</span>
                                        <span>@feature.Name</span>
                                    }
                                </div>
                                @if (feature.NewTab == true)
                                {
                                    <span class="visually-hidden">@Localizer[Promenade.NewWindow]</span>
                                }
                            </a>
                        }
                    }
                    else
                    {
                        <a href="@feature.RedirectLink" target="@(feature.NewTab == true ? "_blank" : null)">
                            <div class="d-flex gap-2 align-items-center ps-2 py-3 location-feature-button">
                                @if (feature.Icon.StartsWith("fa"))
                                {
                                    <span class="@feature.Icon"></span>
                                    <span>@feature.Name</span>
                                }
                                else
                                {
                                    <span>@feature.Icon</span>
                                    <span>@feature.Name</span>
                                }
                            </div>
                            @if (feature.NewTab.HasValue && feature.NewTab.Value == true)
                            {
                                <span class="visually-hidden">@Localizer[Promenade.NewWindow]</span>
                            }
                        </a>
                    }
                </div>
            }
            @if (!string.IsNullOrEmpty(Model.SeeServicesAtAllLink))
            {
                <p class="prom-see-services-at-all"><a href="@Model.SeeServicesAtAllLink">@Localizer[Promenade.SeeServicesAtAll]</a></p>
            }
        </div>
    </div>
    <div class="row g-0 mb-4">
        <div class="d-flex flex-column flex-md-row col-lg-10 offset-lg-1 d-block gap-1 py-1 bg-dark-subtle overflow-hidden">
            <div class="col-12 col-md-4 pt-3" style="background-color: white">
                <h2>@Localizer[Promenade.LocationInformationHeader]</h2>
                @if (Model.Location.DescriptionSegment?.Text?.Length > 0)
                {
                    <div class="prom-feature-segment pe-md-2">
                        <p>@Html.Raw(Model.Location.DescriptionSegment.Text)</p>
                    </div>
                }
            </div>
            @if (Model.ScheduledEvents?.Count() > 0)
            {
                <h2>Upcoming Events</h2>
                <div class="row">
                    @foreach (var scheduledEvent in Model.ScheduledEvents)
                    {
                        <div class="col-12 col-md-4 d-flex mb-4">
                            <div class="card flex-fill w-100">
                                <div class="card-header">
                                    <div class="card-title h5 pt-1">
                                        <a asp-action="@nameof(HomeController.EventDetails)"
                                           asp-controller="@HomeController.Name"
                                           asp-route-slug="@scheduledEvent.Slug"
                                           asp-route-locationSlug="@Model.Location.Stub">
                                            @scheduledEvent.Title
                                        </a>
                                    </div>
                                </div>
                                <div class="card-body">
                                    @scheduledEvent.Description
                                </div>
                                @if (scheduledEvent.MaxPeople > 0)
                                {
                                    <ul class="list-group list-group-flush">
                                        <li class="list-group-item">
                                            Registered event:
                                            @scheduledEvent.Registrations
                                            of
                                            @scheduledEvent.MaxPeople
                                            slots taken
                                        </li>
                                    </ul>
                                }
                                <div class="card-footer d-flex">
                                    <div class="flex-grow-1">@scheduledEvent.StartDate.ToString("g")</div>
                                    <div>@scheduledEvent.DurationText</div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            @if (Model.Location.InteriorImages.Count > 0)
            {
                <div class="col-12 col-md-8" style="background-color: white;">
                    <div id="interiorPhotoCarousel" class="carousel slide">
                        <div class="carousel-indicators">
                            @foreach (var interiorImage in Model.Location.InteriorImages)
                            {
                                <button type="button"
                                        data-bs-target="#interiorPhotoCarousel"
                                        data-bs-slide-to="@interiorImage.SortOrder"
                                        class="@Model.ActiveIfFirstInteriorImage(interiorImage.SortOrder)"
                                        aria-current="true"
                                        aria-label="@interiorImage.AltText"></button>

                            }
                        </div>
                        <div class="carousel-inner">
                            @foreach (var interiorImage in Model.Location.InteriorImages)
                            {
                                <div class="carousel-item @Model.ActiveIfFirstInteriorImage(interiorImage.SortOrder)">
                                    <img src="@interiorImage.ImagePath"
                                         class="d-block w-100"
                                         alt="@interiorImage.AltText">
                                </div>
                            }
                        </div>
                        <button class="carousel-control-prev" type="button" data-bs-target="#interiorPhotoCarousel" data-bs-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Previous</span>
                        </button>
                        <button class="carousel-control-next" type="button" data-bs-target="#interiorPhotoCarousel" data-bs-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Next</span>
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="row g-0">
        <div class="row g-0 col-lg-10 offset-lg-1 border-4 border-bottom">
            <div class="mx-auto" style="max-width: 740px;">
                <div class="row">
                    @if (!string.IsNullOrEmpty(Model.SocialLink) &&
                    !string.IsNullOrEmpty(Model.SocialName) &&
                    !string.IsNullOrEmpty(Model.SocialIcon))
                    {
                        <div class="col-12 col-sm-6 mb-4 location-feature-link">
                            <a href="@Model.SocialLink"
                               target="_blank"
                               class="text-reset">
                                <div class="d-flex gap-4 align-items-center prom-box-border p-3 h-100">
                                    <span class="@Model.SocialIcon display-4 prom-text-color"></span>
                                    <span class="location-feature-link prom-faq-icons">
                                        @Localizer[Promenade.ConnectSocialOn, Model.SocialName]!
                                    </span>
                                </div>
                            </a>
                        </div>

                    }
                    <div class="col-12 col-sm-6 mb-4 location-feature-link">
                        <a href="@Model.Location.SubscriptionLink">
                            <div class="d-flex gap-4 align-items-center prom-box-border p-3 h-100">
                                <span class="fa-solid fa-envelope-open-text display-4 prom-text-color"></span>
                                <span class="location-feature-link prom-faq-icons">
                                    @Localizer[Promenade.SignUpForEmailNewsletter]!
                                </span>
                            </div>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @if (!string.IsNullOrEmpty(Model.PostFeatureSegmentText))
    {
        <div class="row prom-feature-segment">
            <div class="col-12">
                @if (!string.IsNullOrEmpty(Model.PostFeatureSegmentHeader))
                {
                    <h2>@Model.PostFeatureSegmentHeader</h2>
                }
                @Html.Raw(Model.PostFeatureSegmentText)
            </div>
        </div>
    }
    @if (Model.NearbyCount > 1)
    {
        <div class="prom-location-nearby">
            <h2>@Localizer[Promenade.LocationNearbyLocationsHeader]</h2>

            <p>
                @Localizer[Promenade.LocationInterestedInNearby]
                <a aria-label="@Localizer[Promenade.NewWindowItem, @Localizer[Promenade.LocationSubscribeNearby]]"
                   href="@Model.LocationNeighborGroup.SubscriptionUrl"
                   target="_blank">@Localizer[Promenade.LocationSubscribeNearby]</a>
            </p>

            <div class="row">
                <div class="col-md-6 col-lg-5">
                    <a href="@Model.LocationNeighborGroup.MapImage"
                       class="map-popup"
                       data-bs-toggle="modal"
                       data-bs-target="#mapModal"
                       target="_blank">
                        <img src="@Model.LocationNeighborGroup.MapImage"
                             class="d-block img-fluid mx-auto"
                             alt="@Model.LocationNeighborGroup.Description">
                    </a>
                </div>
                <div class="col-md-6 col-lg-7">
                    <table class="table table-sm">
                        @foreach (var locationGroup in Model.NearbyLocationGroups)
                        {
                            <tr>
                                <td>@locationGroup.DisplayOrder.</td>
                                <td colspan="@(locationGroup.Location.HasEvents ? 1 : 2)">
                                    <a asp-action="@nameof(HomeController.Location)"
                                       asp-controller="@HomeController.Name"
                                       asp-route-locationStub="@locationGroup.Location.Stub">@locationGroup.Location.Name</a>
                                </td>
                                @if (locationGroup.Location.HasEvents)
                                {
                                    <td>
                                        @if (!string.IsNullOrWhiteSpace(locationGroup.Location.EventLink))
                                        {
                                            <a aria-label="@Localizer[Promenade.LocationSubscribeToName, locationGroup.Location.Name]"
                                               href="@locationGroup.Location.SubscriptionLink"
                                               class="btn btn-sm btn-outline-secondary text-dark m-1 float-end">
                                                <span class="fa-regular fa-envelope"></span>
                                                @Localizer[Promenade.ButtonSubscribe]
                                            </a>
                                        }
                                        @if (!string.IsNullOrWhiteSpace(locationGroup.Location.SubscriptionLink))
                                        {
                                            <a aria-label="@Localizer[Promenade.LocationViewEventsName, locationGroup.Location.Name]"
                                               href="@locationGroup.Location.EventLink"
                                               class="btn btn-sm btn-outline-secondary text-dark m-1 float-end">
                                                <span class="fa-regular fa-calendar-days"></span>
                                                @Localizer[Promenade.LocationButtonEvents]
                                            </a>
                                        }
                                    </td>
                                }
                            </tr>
                        }
                        <tr>
                            <td colspan="3">
                                <a href="@Model.LocationNeighborGroup.SubscriptionUrl"
                                   class="btn btn-sm btn-outline-secondary text-dark m-1 float-end"
                                   target="_blank">
                                    <span class="fa-regular fa-envelope"></span>
                                    @if (Model.NearbyCount == Model.NearbyEventsCount)
                                    {
                                        @Localizer[Promenade.LocationUpdatesFromAllCount, Model.NearbyEventsCount]
                                    }
                                    else
                                    {
                                        @Localizer[Promenade.LocationUpdatesFromCount, Model.NearbyEventsCount]
                                    }
                                    <span class="visually-hidden">@Localizer[Promenade.NewWindow]</span>
                                </a>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

<div modal id="featureModal"></div>

@section Scripts {
    <script>
        $("#featureModal").on("show.bs.modal", function (event) {
            var button = $(event.relatedTarget);
            var featureUrl = button.data("featureurl");
            var name = button.data("name");

            var modal = $(this);
            modal.find(".modal-title").html(name);

            var modalBody = modal.find(".modal-body");
            modalBody.html("<div class=\"text-center\"><span class=\"fa-solid fa-spinner fa-2x fa-pulse\"></span></div>")

            $.getJSON(featureUrl,
                function (response) {
                    modalBody.html(response.bodyText).append(response.text);
                })
                .fail(function () {
                    window.location.href = button.attr("href");
                });
        });
    </script>

    @if (Model.Schema != null)
    {
        <script type="application/ld+json">
            @Html.Raw(Model.Schema.ToHtmlEscapedString())
        </script>
    }
}
